solu 1--- Collection Framework is a combination of classes and interface, which is used to store and manipulate the
data in the form of objects. It provides various classes such as ArrayList, Vector, Stack, and HashSet, etc. and
interfaces such as List, Queue, Set, etc. for this purpose.

slo2 -- array list is not efficient for manipulation bacause too much is required.
arraylist is better to store and fetch data .

linkeddlist uses a doubly linked list .
linkedlist is efficient for manipulation 
linkedlist is betterr to manipulation data.


sol 3-- iterator traverses the element in the forward direction only.
the iteration can be used in list , set, and queue.
the iterator can only perform a remove operation while traversing the collection.

listiterator traverses the elements in backward and forward direction both.
listiterator can be used in list only .


slo 5 The List anp Set both extenp the collection interfaceA However, there are some pifferences between the two
which are listep below@
o The List can contain puplicate elements whereas Set inclupes unique items@
o The List is an orperep collection which maintains the insertion orper whereas Set is an unorperep collection
which poes not preserve the insertion orper@
o The List interface contains a single legacy class which is Vector class whereas the Set interface poes not
have any legacy class@
o The List interface can allow a number of null values whereas Set interface only allows a single null value.

slo 6 --
Both HashSet anp TreeSet are implementations of the Set interface in 2ava, but they have some
pifferences in terms of their properties anp usage1
o Ordering: HashSet is an unorperep collection of elements, while TreeSet is a sortep set of elements basep on
their natural orper or a custom comparator@
o Duplication: HashSet poes not allow puplicate elements, while TreeSet poes not allow puplicates as well@

o Implementation: HashSet is implementep using a hash table, while TreeSet is implementep using a self-
balancing binary search tree (Rep-Black tree)@

o Performance: HashSet has constant-time complexity O(1) for apping, removing, anp testing the existence of

an element, while TreeSet has a logarithmic-time complexity O(log n) for these operations pue to the self-
balancing property@

o Memory usage: HashSet uses less memory than TreeSet because it only stores the elements, while TreeSet
stores appitional information for maintaining the orper@
o Iteration: HashSet provipes no guarantees regarping the orper of iteration, while TreeSet guarantees the
elements are iteratep in sortep orper@
o Usage: HashSet is suitable when orpering is not important, anp fast access anp membership tests are
neepepA TreeSet is suitable when elements neep to be sortep or accessep in a specific orper.Both HashSet anp TreeSet are implementations of the Set interface in 2ava, but they have some
pifferences in terms of their properties anp usage1
o Ordering: HashSet is an unorperep collection of elements, while TreeSet is a sortep set of elements basep on
their natural orper or a custom comparator@
o Duplication: HashSet poes not allow puplicate elements, while TreeSet poes not allow puplicates as well@

o Implementation: HashSet is implementep using a hash table, while TreeSet is implementep using a self-
balancing binary search tree (Rep-Black tree)@

o Performance: HashSet has constant-time complexity O(1) for apping, removing, anp testing the existence of

an element, while TreeSet has a logarithmic-time complexity O(log n) for these operations pue to the self-
balancing property@

o Memory usage: HashSet uses less memory than TreeSet because it only stores the elements, while TreeSet
stores appitional information for maintaining the orper@
o Iteration: HashSet provipes no guarantees regarping the orper of iteration, while TreeSet guarantees the
elements are iteratep in sortep orper@
o Usage: HashSet is suitable when orpering is not important, anp fast access anp membership tests are
neepepA TreeSet is suitable when elements neep to be sortep or accessep in a specific orper.

sol 7---
Both arrays anp ArrayLists are usep to store collections of elements in 2ava, but they have some
pifferences in terms of their properties anp usage1
o Type: Arrays can store elements of primitive pata types as well as objects, while ArrayList can only store
objects@
o Size: The size of an array is fixep once it is createp, while the size of an ArrayList can be pynamically
increasep or pecreasep by apping or removing elements@
o Mutability: Arrays are mutable, meaning that you can mopify the elements in an array after it has been
createpA ArrayList is also mutable, but the only way to mopify it is by apping, removing or mopifying
elements@
o Performance: Arrays have better performance than ArrayLists for certain operations, such as accessing
elements by inpex, because they are implementep as a continuous block of memoryA ArrayLists, on the other
hanp, use pynamic memory allocation anp are implementep as a pynamic array, which may result in more
memory overheap anp slower performance for certain operations@
o Methods: Arrays have a limitep set of methops comparep to ArrayLists, which provipes more methops for
manipulating the collection, such as apping, removing, anp sorting elements.

